@use 'sass:string';
@use 'sass:math';
@use './tokens.scss' as tokens;

$checkbox-mark-border-width: 2px;
$checkbox-mark-padding: $checkbox-mark-border-width * 2;

@mixin color-class($variants-color) {
  $properties: (
    'bg': background-color,
    'color': color,
  );

@each $class-property, $css-property in $properties {
  @each $class-color, $color-value in $variants-color {
    $colorIsMap: type-of($color-value)==map;

    @if $colorIsMap {
      @include loop-on-palette($color-value,
        $class-property,
        $css-property,
        $class-color );
    }

    @else {
      .#{$class-property}-#{$class-color} {
        #{$css-property}: $color-value;
      }
    }
  }
}
}

@mixin loop-on-palette($color-value,
  $class-property,
  $css-property,
  $class-color) {
  @each $range, $color in $color-value {
    $isMainColor: $range ==500;
    $ColorExcludeContrast: if(type-of($color) !=map, $color, false);

    #{if($isMainColor,'.#{$class-property}-#{$class-color}',' .#{$class-property}-#{$class-color}-#{$range}' )} {
#{$css-property}: $ColorExcludeContrast;
  }
}
}

@mixin border-colors-class($color-class) {
  $border-properties: (
    border,
    border-right,
    border-left,
    border-top,
    border-bottom,
    border-inline,
    border-block
  );

@each $property in $border-properties {
  @each $color-item in $color-class {
    $color-name: nth($color-item, 1);
    $color-value: nth($color-item, 2);

    @if type-of($color-value)==map {
      $main-color: map-get($color-value, 500);

      .#{$property}-#{$color-name} {
        #{$property}: 1px solid $main-color;
      }
    }

    @else {
      .#{$property}-#{$color-name} {
        #{$property}: 1px solid $color-value;
      }
    }
  }
}
}

@mixin icon-size($tamaño, $font-size) {
  width: $tamaño;
  height: $tamaño;
  font-size: $font-size;
}

@mixin width-height($size) {
  width: $size;
  height: $size;
}

@mixin density($size-container, $size-icon) {
  width: $size-container !important;
  height: $size-container !important;
  padding: calc(($size-container - $size-icon) / 2) !important;

  [class*='mat-icon'] {
    width: $size-icon !important;
    height: $size-icon !important;
    font-size: $size-icon !important;
    vertical-align: text-top;
  }

  [class*='mat-mdc-button-touch-target'] {
    height: $size-container !important;
  }
}

@mixin padding($container, $size-icon) {
  padding: calc(($container - $size-icon) / 2);
}

@mixin container-icon-size($size-container, $size-icon) {
  @include width-height($size-container);
  @include padding($size-container, $size-icon);

  [class*='mat-icon'],
  svg {
    @include width-height($size-icon);
    font-size: $size-icon;
    vertical-align: text-top;
  }

  [class*='mat-mdc-button-touch-target'] {
    @include width-height($size-container);
  }
}

@mixin colors-alerts($background, $color, $icon) {
  background-color: $background;

  .icon-variant {
    color: map-get($color, 500);

    &::before {
      content: $icon;
    }
  }

  .container-icon-ripple {
    background-color: rgba(map-get($color, 500), 0.12);
  }
}

@mixin alert($propiedades-alerta, $text-color) {
  @each $type, $color, $icon in $propiedades-alerta {
    .mat-alert {
      border-radius: 4px;
      padding: 6px 16px;
      color: $text-color;

      &.#{$type} {
        &.standard {
          @include colors-alerts(map-get($color, 50), $color, $icon);
        }

        &.filled {
          @include colors-alerts(map-get($color, 500), $color, $icon);

          .icon-variant,
          p {
            color: #fff;
          }
        }

        &.outlined {
          @include colors-alerts(transparent, $color, $icon);
          border: 1px solid map-get($color, 500);
        }
      }
    }

    .mat-mdc-snack-bar-container {
      .icon-variant {
        width: 28px;
      }

      &.#{$type} {
        .mdc-snackbar__surface {
          background: map-get($color, 50) !important;
          @include colors-alerts(map-get($color, 50), $color, $icon);
        }

        .mat-mdc-snack-bar-label {
          padding: 6px 16px;
        }
      }
    }
  }
}

@mixin chip() {
  .mat-mdc-standard-chip {
    &.mat-mdc-chip-selected {
      .mdc-evolution-chip__graphic {
        width: 0;
      }

      .mdc-evolution-chip__action {
        padding-right: 12px;
      }

      .mdc-evolution-chip__checkmark {
        display: none;
      }

      &.stroked {
        --mdc-chip-elevated-disabled-container-color: transparent;
        --mdc-chip-disabled-label-text-color: var(--mdc-chip-elevated-container-color);
        border: 1px solid var(--mdc-chip-elevated-container-color);
        --mdc-chip-with-trailing-icon-disabled-trailing-icon-color: var(--mdc-chip-elevated-container-color);
      }
    }

    &.mdc-evolution-chip--disabled {
      cursor: pointer;
      pointer-events: auto;
      opacity: 1;

      &.stroked {
        --mdc-chip-elevated-disabled-container-color: transparent;
        border: 1px solid var(--mdc-chip-elevated-container-color);
      }
    }
  }
}

@mixin mat-button-base-sizes($button-base-sizes) {
  @each $size-class, $values in $button-base-sizes {
    .mdc-button.mat-mdc-button-base {
      #{if($size-class != 'default', '&.#{$size-class}', ' &')} {
$size: map-get($values, size);
      padding: map-get($values, padding);
      --mdc-protected-button-container-height: #{$size};
      --mdc-outlined-button-container-height: #{$size};
      --mdc-filled-button-container-height: #{$size};
      --mdc-text-button-container-height: #{$size};

      .mat-icon[iconPositionEnd] {
        margin-left: 0px;
      }
    }

    .mat-mdc-button-touch-target {
      height: auto;
    }
  }
}
}

@mixin mat-fab-button-sizes($mat-fab-button-sizes) {
  @each $size-class, $variants-fab-button in $mat-fab-button-sizes {
    @each $variant, $values in $variants-fab-button {
      $container-size: map-get($values, container-size);
      $icon-size: map-get($values, icon);

      .mdc-fab.mat-mdc-fab#{if($size-class !=  'default', '.#{$size-class}', null)} {
@if ($variant =='fab') {
        &:not(.mat-mdc-extended-fab) {
          @include container-icon-size($container-size, $icon-size);
        }
      }

      @else {
        &.mat-mdc-extended-fab {
          height: $container-size;

          .mat-icon {
            @include icon-size($icon-size, $icon-size);
          }
        }
      }
    }
  }
}
}

@mixin mat-checkbox-sizes($checkbox-sizes) {
  .mat-mdc-checkbox {
    @each $size-class, $value in $checkbox-sizes {
      @at-root #{if($size-class != default, "&.#{$size-class}", " &")} {
 --mdc-checkbox-state-layer-size: #{map-get($value, ripple)};

      .mdc-checkbox .mdc-checkbox__background {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        @include width-height(map-get($value, vector));
      }

      .mat-mdc-checkbox-touch-target {
        @include width-height(100%);
      }
    }
  }
}
}

@mixin _checkbox-checked-styles-with-size($mark-size) {
  $height: math.div($mark-size - $checkbox-mark-border-width, 2) + 1;
  $short-side: $height + $checkbox-mark-border-width;

  width: $mark-size + 1;
  height: $height;
  transform-origin: center;
  top: -1 * math.div($short-side - $checkbox-mark-border-width, math.sqrt(2)) !important;

  left: 0;
  bottom: 0;
  right: 0;

  margin: auto;
}

@mixin _checkbox-indeterminate-styles-with-size($box-size, $border-size) {
  top: math.div($box-size - $checkbox-mark-border-width, 2) - $border-size;
  width: $box-size - $checkbox-mark-border-width - (2 * $border-size);
}

@mixin pseudo-checkbox-container-size($box-size) {
  .mat-pseudo-checkbox {
    width: $box-size;
    height: $box-size;

    &::after {
      border-left-width: 1px;
      border-bottom-width: 1px;
    }
  }

  .mat-pseudo-checkbox-minimal {
    $mark-size: $box-size - $checkbox-mark-padding;
    $border-size: 0;

    &.mat-pseudo-checkbox-checked::after {
      @include _checkbox-checked-styles-with-size($mark-size);
    }

    &.mat-pseudo-checkbox-indeterminate::after {
      @include _checkbox-indeterminate-styles-with-size($box-size,
        $border-size );
    }
  }

  .mat-pseudo-checkbox-full {
    $mark-size: $box-size - (2 * $checkbox-mark-padding);
    $border-size: 2px;

    &.mat-pseudo-checkbox-checked::after {
      @include _checkbox-checked-styles-with-size($mark-size);
    }

    &.mat-pseudo-checkbox-indeterminate::after {
      @include _checkbox-indeterminate-styles-with-size($box-size,
        $border-size );
    }
  }
}

@mixin pseudo-checkbox-sizes($checkbox-sizes) {
  @each $size-class, $value in $checkbox-sizes {
    .mat-mdc-option.mdc-list-item:has(.mat-pseudo-checkbox) {
      #{if($size-class != default, "&.#{$size-class}-checkbox", " &")} {
$size: map-get($value, vector);
      @include pseudo-checkbox-container-size($size);
    }
  }
}
}

@mixin size-rating($default,
  $personalizate-class,
  $personalizate-value,
  $large) {
  mat-rating {
    display: inline-flex;

    &:not(.#{$personalizate-class}, .large) {
      font-size: $default;
    }

    &.#{$personalizate-class} {
      font-size: $personalizate-value;
    }

    &.large {
      font-size: $large;
    }

    .mat-icon:not(:has(#fakeId)) {
      width: inherit !important;
      height: inherit !important;
      font-size: inherit !important;
    }
  }
}

@mixin icon-button-sizes($sizes-button) {
  @each $size-class, $values in $sizes-button {
    $container-size: map-get($values, container-size);
    $icon-size: map-get($values, icon-size);

    .mdc-icon-button.mat-mdc-icon-button.mat-mdc-button-base {
      &#{if($size-class !=  'default', '.#{$size-class}', null)} {
@include container-icon-size($container-size, $icon-size);
    }
  }
}
}

@mixin table-sizes($table-sizes) {
  $default-size: medium;

  @each $size, $dimensions in $table-sizes {
    $size-selector: if($size ==$default-size, '', '.#{$size}');

    .mat-mdc-table#{$size-selector} {
      .mdc-data-table__header-row {
        height: map-get($dimensions, thead-row);
      }

      .mdc-data-table__row {
        height: map-get($dimensions, tbody-row);
      }

      th,
      td {
        padding-block: map-get($dimensions, cell-padding);
      }
    }
  }
}

@mixin table-responsive($handleTableCells, $border-color) {
  @media screen and (max-width: tokens.$breakpoint-laptop) {
    .mat-mdc-table {
      thead {
        display: none;
      }

      .mat-mdc-row.mdc-data-table__row {
        display: block;
        height: fit-content;

        &:not(:last-of-type) {
          border-bottom: 4px solid $border-color;
        }
      }

      .mat-mdc-cell.mdc-data-table__cell {
        display: flex;
        justify-content: space-between;
        align-items: center;
        min-height: map-get($handleTableCells, size);
        padding-block: map-get($handleTableCells, padding-block);
        line-height: normal;
        flex-wrap: wrap;

        &:before {
          content: attr(data-label);
        }

        &:not(:last-of-type) {
          border-bottom: 1px solid $border-color;
        }
      }
    }
  }
}

@mixin mat-icon-sizes($size-map) {

  :not(.mdc-evolution-chip__text-label,
    .mdc-icon-button,
    .mdc-fab,
    .mat-mdc-chip-remove,
    .mat-button-toggle-label-content,
    .mat-mdc-form-field-icon-suffix,
    .mat-expansion-panel-header-description,
    .mat-step-icon-content,
    .mat-datepicker-toggle,
    .rating-container,
    .stars-outer)>.mat-icon {
    display: inline-flex;
    justify-content: center;
    align-items: center;

    @each $size, $heigth, $font-size in $size-map {
      &.#{$size} {
        @include icon-size($heigth, $font-size);
      }
    }
  }
}

@mixin mat-slide-toggle-sizes($slide-toggle-sizes) {
  .mat-mdc-slide-toggle {
    @each $size-class, $values in $slide-toggle-sizes {
      @at-root #{if($size-class != default, "&.#{$size-class}", " &")} {
 .mdc-switch {
        @each $inner-elements, $values-sizes in $values {
          --mdc-switch-#{$inner-elements}: #{$values-sizes};
        }
      }
    }
  }
}
}

@mixin date-picker-toggle-sizes($icon-button-sizes,
  $default-size-data-picker-toggle,
  $new-class) {
  $new-map-sizes: append($icon-button-sizes, $new-class);

  @each $size-class, $values in $new-map-sizes {
    .mat-datepicker-toggle {
      &#{if($size-class !=  'default', '.#{$size-class}', ' ')} {
 .mdc-icon-button.mat-mdc-icon-button {
        $extend-class: if($size-class ==$new-class,
            '.mdc-icon-button',
            if($size-class =='default',
              '.#{$default-size-data-picker-toggle}',
              '.#{$size-class}'
            ));
        display: inline-flex;
        @extend #{$extend-class} !optional;
      }
    }
  }
}
}

@mixin order-class() {
  @for $order-value from 1 through 12 {
    .order-#{$order-value} {
      order: $order-value;
    }

    @media only screen and (min-width: tokens.$breakpoint-desktop) {
      .order-xxl-#{$order-value} {
        order: $order-value;
      }
    }

    @media only screen and (min-width: tokens.$breakpoint-laptop-frame) and (max-width: tokens.$breakpoint-desktop) {
      .order-xl-#{$order-value} {
        order: $order-value;
      }
    }

    @media only screen and (min-width: tokens.$breakpoint-laptop) and (max-width: tokens.$breakpoint-laptop-frame) {
      .order-l-#{$order-value} {
        order: $order-value;
      }
    }

    @media only screen and (min-width: tokens.$breakpoint-tablet) and (max-width: tokens.$breakpoint-laptop) {
      .order-m-#{$order-value} {
        order: $order-value;
      }
    }

    @media only screen and (max-width: tokens.$breakpoint-tablet) {
      .order-s-#{$order-value} {
        order: $order-value;
      }
    }

    @media only screen and (max-width: tokens.$breakpoint-mobile) {
      .order-xs-#{$order-value} {
        order: $order-value;
      }
    }
  }
}